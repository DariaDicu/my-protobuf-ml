fun parseNextField buff obj remaining = 
      if (remaining <= 0) then
        ()
      else
        let
          val ((Tag(t), Code(c)), parseResult) = parseKey buff
          val (ParsedBytesCount(keyByteCount), buff) = parse_result
          val remaining = remaining - keyByteCount
        in
          if (remaining <= 0) then
            raise Exception(PARSE, "Not enough bytes in message to parse the message fields.")
          else (case (t) of 1 => (
            let
              val (field_value, parse_result) = parseString buff
              val (ParsedBytesCount(parsed_bytes), buff) = parse_result
            in
              if (remaining > parsed_bytes) then
                (String.setNumber (obj, field_value);
                parseNextField buff obj (remaining - parsed_bytes))
              else
                raise Exception(PARSE, "Error in matching the message length with fields length.")
            end)
          | 2 => 
            (let
              val (field_value, parse_result) = PhoneType.parse buff
              val (ParsedBytesCount(parsed_bytes), buff) = parse_result
            in
              if (remaining > parsed_bytes) then
                (PhoneType.setType_ (obj, field_value);
                parseNextField buff obj (remaining - parsed_bytes))
              else
                raise Exception(PARSE, "Error in matching the message length with fields length.")
            end)
          | n => raise Exception(PARSE, "Attempting to parse enum of unknown tag value.")

        )
      end

