// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embedded.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "embedded.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M1_reflection_ = NULL;
const ::google::protobuf::Descriptor* M1_M2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M1_M2_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_embedded_2eproto() {
  protobuf_AddDesc_embedded_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "embedded.proto");
  GOOGLE_CHECK(file != NULL);
  M1_descriptor_ = file->message_type(0);
  static const int M1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1, message2_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1, message2_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1, message3_list_),
  };
  M1_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      M1_descriptor_,
      M1::default_instance_,
      M1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1, _has_bits_[0]),
      -1,
      -1,
      sizeof(M1),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1, _internal_metadata_),
      -1);
  M1_M2_descriptor_ = M1_descriptor_->nested_type(0);
  static const int M1_M2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1_M2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1_M2, id_),
  };
  M1_M2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      M1_M2_descriptor_,
      M1_M2::default_instance_,
      M1_M2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1_M2, _has_bits_[0]),
      -1,
      -1,
      sizeof(M1_M2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M1_M2, _internal_metadata_),
      -1);
  M3_descriptor_ = file->message_type(1);
  static const int M3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3, name_),
  };
  M3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      M3_descriptor_,
      M3::default_instance_,
      M3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3, _has_bits_[0]),
      -1,
      -1,
      sizeof(M3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_embedded_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      M1_descriptor_, &M1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      M1_M2_descriptor_, &M1_M2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      M3_descriptor_, &M3::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_embedded_2eproto() {
  delete M1::default_instance_;
  delete M1_reflection_;
  delete M1_M2::default_instance_;
  delete M1_M2_reflection_;
  delete M3::default_instance_;
  delete M3_reflection_;
}

void protobuf_AddDesc_embedded_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016embedded.proto\"x\n\002M1\022\032\n\nmessage2_1\030\001 \002"
    "(\0132\006.M1.M2\022\032\n\nmessage2_2\030\002 \001(\0132\006.M1.M2\022\032"
    "\n\rmessage3_list\030\003 \003(\0132\003.M3\032\036\n\002M2\022\014\n\004name"
    "\030\001 \001(\t\022\n\n\002id\030\002 \002(\005\"\022\n\002M3\022\014\n\004name\030\001 \001(\t", 158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "embedded.proto", &protobuf_RegisterTypes);
  M1::default_instance_ = new M1();
  M1_M2::default_instance_ = new M1_M2();
  M3::default_instance_ = new M3();
  M1::default_instance_->InitAsDefaultInstance();
  M1_M2::default_instance_->InitAsDefaultInstance();
  M3::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_embedded_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_embedded_2eproto {
  StaticDescriptorInitializer_embedded_2eproto() {
    protobuf_AddDesc_embedded_2eproto();
  }
} static_descriptor_initializer_embedded_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int M1_M2::kNameFieldNumber;
const int M1_M2::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

M1_M2::M1_M2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:M1.M2)
}

void M1_M2::InitAsDefaultInstance() {
}

M1_M2::M1_M2(const M1_M2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:M1.M2)
}

void M1_M2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M1_M2::~M1_M2() {
  // @@protoc_insertion_point(destructor:M1.M2)
  SharedDtor();
}

void M1_M2::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void M1_M2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M1_M2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M1_M2_descriptor_;
}

const M1_M2& M1_M2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_embedded_2eproto();
  return *default_instance_;
}

M1_M2* M1_M2::default_instance_ = NULL;

M1_M2* M1_M2::New(::google::protobuf::Arena* arena) const {
  M1_M2* n = new M1_M2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void M1_M2::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool M1_M2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:M1.M2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "M1.M2.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:M1.M2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:M1.M2)
  return false;
#undef DO_
}

void M1_M2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:M1.M2)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "M1.M2.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:M1.M2)
}

::google::protobuf::uint8* M1_M2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:M1.M2)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "M1.M2.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:M1.M2)
  return target;
}

int M1_M2::ByteSize() const {
  int total_size = 0;

  // required int32 id = 2;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M1_M2::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const M1_M2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const M1_M2>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M1_M2::MergeFrom(const M1_M2& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void M1_M2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2::CopyFrom(const M1_M2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void M1_M2::Swap(M1_M2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void M1_M2::InternalSwap(M1_M2* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata M1_M2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M1_M2_descriptor_;
  metadata.reflection = M1_M2_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int M1::kMessage21FieldNumber;
const int M1::kMessage22FieldNumber;
const int M1::kMessage3ListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

M1::M1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:M1)
}

void M1::InitAsDefaultInstance() {
  message2_1_ = const_cast< ::M1_M2*>(&::M1_M2::default_instance());
  message2_2_ = const_cast< ::M1_M2*>(&::M1_M2::default_instance());
}

M1::M1(const M1& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:M1)
}

void M1::SharedCtor() {
  _cached_size_ = 0;
  message2_1_ = NULL;
  message2_2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M1::~M1() {
  // @@protoc_insertion_point(destructor:M1)
  SharedDtor();
}

void M1::SharedDtor() {
  if (this != default_instance_) {
    delete message2_1_;
    delete message2_2_;
  }
}

void M1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M1_descriptor_;
}

const M1& M1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_embedded_2eproto();
  return *default_instance_;
}

M1* M1::default_instance_ = NULL;

M1* M1::New(::google::protobuf::Arena* arena) const {
  M1* n = new M1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void M1::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_message2_1()) {
      if (message2_1_ != NULL) message2_1_->::M1_M2::Clear();
    }
    if (has_message2_2()) {
      if (message2_2_ != NULL) message2_2_->::M1_M2::Clear();
    }
  }
  message3_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool M1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:M1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .M1.M2 message2_1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message2_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message2_2;
        break;
      }

      // optional .M1.M2 message2_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_message2_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message2_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message3_list;
        break;
      }

      // repeated .M3 message3_list = 3;
      case 3: {
        if (tag == 26) {
         parse_message3_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_message3_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_message3_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_message3_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:M1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:M1)
  return false;
#undef DO_
}

void M1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:M1)
  // required .M1.M2 message2_1 = 1;
  if (has_message2_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->message2_1_, output);
  }

  // optional .M1.M2 message2_2 = 2;
  if (has_message2_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->message2_2_, output);
  }

  // repeated .M3 message3_list = 3;
  for (unsigned int i = 0, n = this->message3_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->message3_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:M1)
}

::google::protobuf::uint8* M1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:M1)
  // required .M1.M2 message2_1 = 1;
  if (has_message2_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->message2_1_, target);
  }

  // optional .M1.M2 message2_2 = 2;
  if (has_message2_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->message2_2_, target);
  }

  // repeated .M3 message3_list = 3;
  for (unsigned int i = 0, n = this->message3_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->message3_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:M1)
  return target;
}

int M1::ByteSize() const {
  int total_size = 0;

  // required .M1.M2 message2_1 = 1;
  if (has_message2_1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message2_1_);
  }
  // optional .M1.M2 message2_2 = 2;
  if (has_message2_2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message2_2_);
  }

  // repeated .M3 message3_list = 3;
  total_size += 1 * this->message3_list_size();
  for (int i = 0; i < this->message3_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message3_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M1::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const M1* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const M1>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M1::MergeFrom(const M1& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  message3_list_.MergeFrom(from.message3_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message2_1()) {
      mutable_message2_1()->::M1_M2::MergeFrom(from.message2_1());
    }
    if (from.has_message2_2()) {
      mutable_message2_2()->::M1_M2::MergeFrom(from.message2_2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void M1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1::CopyFrom(const M1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_message2_1()) {
    if (!this->message2_1_->IsInitialized()) return false;
  }
  if (has_message2_2()) {
    if (!this->message2_2_->IsInitialized()) return false;
  }
  return true;
}

void M1::Swap(M1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void M1::InternalSwap(M1* other) {
  std::swap(message2_1_, other->message2_1_);
  std::swap(message2_2_, other->message2_2_);
  message3_list_.UnsafeArenaSwap(&other->message3_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata M1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M1_descriptor_;
  metadata.reflection = M1_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// M1_M2

// optional string name = 1;
bool M1_M2::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void M1_M2::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void M1_M2::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void M1_M2::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& M1_M2::name() const {
  // @@protoc_insertion_point(field_get:M1.M2.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void M1_M2::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:M1.M2.name)
}
 void M1_M2::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:M1.M2.name)
}
 void M1_M2::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:M1.M2.name)
}
 ::std::string* M1_M2::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:M1.M2.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* M1_M2::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void M1_M2::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:M1.M2.name)
}

// required int32 id = 2;
bool M1_M2::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void M1_M2::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void M1_M2::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void M1_M2::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 M1_M2::id() const {
  // @@protoc_insertion_point(field_get:M1.M2.id)
  return id_;
}
 void M1_M2::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:M1.M2.id)
}

// -------------------------------------------------------------------

// M1

// required .M1.M2 message2_1 = 1;
bool M1::has_message2_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void M1::set_has_message2_1() {
  _has_bits_[0] |= 0x00000001u;
}
void M1::clear_has_message2_1() {
  _has_bits_[0] &= ~0x00000001u;
}
void M1::clear_message2_1() {
  if (message2_1_ != NULL) message2_1_->::M1_M2::Clear();
  clear_has_message2_1();
}
const ::M1_M2& M1::message2_1() const {
  // @@protoc_insertion_point(field_get:M1.message2_1)
  return message2_1_ != NULL ? *message2_1_ : *default_instance_->message2_1_;
}
::M1_M2* M1::mutable_message2_1() {
  set_has_message2_1();
  if (message2_1_ == NULL) {
    message2_1_ = new ::M1_M2;
  }
  // @@protoc_insertion_point(field_mutable:M1.message2_1)
  return message2_1_;
}
::M1_M2* M1::release_message2_1() {
  clear_has_message2_1();
  ::M1_M2* temp = message2_1_;
  message2_1_ = NULL;
  return temp;
}
void M1::set_allocated_message2_1(::M1_M2* message2_1) {
  delete message2_1_;
  message2_1_ = message2_1;
  if (message2_1) {
    set_has_message2_1();
  } else {
    clear_has_message2_1();
  }
  // @@protoc_insertion_point(field_set_allocated:M1.message2_1)
}

// optional .M1.M2 message2_2 = 2;
bool M1::has_message2_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void M1::set_has_message2_2() {
  _has_bits_[0] |= 0x00000002u;
}
void M1::clear_has_message2_2() {
  _has_bits_[0] &= ~0x00000002u;
}
void M1::clear_message2_2() {
  if (message2_2_ != NULL) message2_2_->::M1_M2::Clear();
  clear_has_message2_2();
}
const ::M1_M2& M1::message2_2() const {
  // @@protoc_insertion_point(field_get:M1.message2_2)
  return message2_2_ != NULL ? *message2_2_ : *default_instance_->message2_2_;
}
::M1_M2* M1::mutable_message2_2() {
  set_has_message2_2();
  if (message2_2_ == NULL) {
    message2_2_ = new ::M1_M2;
  }
  // @@protoc_insertion_point(field_mutable:M1.message2_2)
  return message2_2_;
}
::M1_M2* M1::release_message2_2() {
  clear_has_message2_2();
  ::M1_M2* temp = message2_2_;
  message2_2_ = NULL;
  return temp;
}
void M1::set_allocated_message2_2(::M1_M2* message2_2) {
  delete message2_2_;
  message2_2_ = message2_2;
  if (message2_2) {
    set_has_message2_2();
  } else {
    clear_has_message2_2();
  }
  // @@protoc_insertion_point(field_set_allocated:M1.message2_2)
}

// repeated .M3 message3_list = 3;
int M1::message3_list_size() const {
  return message3_list_.size();
}
void M1::clear_message3_list() {
  message3_list_.Clear();
}
const ::M3& M1::message3_list(int index) const {
  // @@protoc_insertion_point(field_get:M1.message3_list)
  return message3_list_.Get(index);
}
::M3* M1::mutable_message3_list(int index) {
  // @@protoc_insertion_point(field_mutable:M1.message3_list)
  return message3_list_.Mutable(index);
}
::M3* M1::add_message3_list() {
  // @@protoc_insertion_point(field_add:M1.message3_list)
  return message3_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::M3 >*
M1::mutable_message3_list() {
  // @@protoc_insertion_point(field_mutable_list:M1.message3_list)
  return &message3_list_;
}
const ::google::protobuf::RepeatedPtrField< ::M3 >&
M1::message3_list() const {
  // @@protoc_insertion_point(field_list:M1.message3_list)
  return message3_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int M3::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

M3::M3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:M3)
}

void M3::InitAsDefaultInstance() {
}

M3::M3(const M3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:M3)
}

void M3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3::~M3() {
  // @@protoc_insertion_point(destructor:M3)
  SharedDtor();
}

void M3::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void M3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3_descriptor_;
}

const M3& M3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_embedded_2eproto();
  return *default_instance_;
}

M3* M3::default_instance_ = NULL;

M3* M3::New(::google::protobuf::Arena* arena) const {
  M3* n = new M3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void M3::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool M3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:M3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "M3.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:M3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:M3)
  return false;
#undef DO_
}

void M3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:M3)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "M3.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:M3)
}

::google::protobuf::uint8* M3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:M3)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "M3.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:M3)
  return target;
}

int M3::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const M3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const M3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3::MergeFrom(const M3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void M3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3::CopyFrom(const M3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3::IsInitialized() const {

  return true;
}

void M3::Swap(M3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void M3::InternalSwap(M3* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata M3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3_descriptor_;
  metadata.reflection = M3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// M3

// optional string name = 1;
bool M3::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void M3::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void M3::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void M3::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& M3::name() const {
  // @@protoc_insertion_point(field_get:M3.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void M3::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:M3.name)
}
 void M3::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:M3.name)
}
 void M3::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:M3.name)
}
 ::std::string* M3::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:M3.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* M3::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void M3::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:M3.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
