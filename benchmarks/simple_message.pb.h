// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_message.proto

#ifndef PROTOBUF_simple_5fmessage_2eproto__INCLUDED
#define PROTOBUF_simple_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_simple_5fmessage_2eproto();
void protobuf_AssignDesc_simple_5fmessage_2eproto();
void protobuf_ShutdownFile_simple_5fmessage_2eproto();

class SimpleMessage;

// ===================================================================

class SimpleMessage : public ::google::protobuf::Message {
 public:
  SimpleMessage();
  virtual ~SimpleMessage();

  SimpleMessage(const SimpleMessage& from);

  inline SimpleMessage& operator=(const SimpleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleMessage& default_instance();

  void Swap(SimpleMessage* other);

  // implements Message ----------------------------------------------

  inline SimpleMessage* New() const { return New(NULL); }

  SimpleMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleMessage& from);
  void MergeFrom(const SimpleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string phone_number = 3;
  int phone_number_size() const;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 3;
  const ::std::string& phone_number(int index) const;
  ::std::string* mutable_phone_number(int index);
  void set_phone_number(int index, const ::std::string& value);
  void set_phone_number(int index, const char* value);
  void set_phone_number(int index, const char* value, size_t size);
  ::std::string* add_phone_number();
  void add_phone_number(const ::std::string& value);
  void add_phone_number(const char* value);
  void add_phone_number(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& phone_number() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_phone_number();

  // @@protoc_insertion_point(class_scope:SimpleMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> phone_number_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_simple_5fmessage_2eproto();
  friend void protobuf_AssignDesc_simple_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_simple_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SimpleMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleMessage

// required int32 id = 1;
inline bool SimpleMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SimpleMessage::id() const {
  // @@protoc_insertion_point(field_get:SimpleMessage.id)
  return id_;
}
inline void SimpleMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SimpleMessage.id)
}

// optional string name = 2;
inline bool SimpleMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimpleMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SimpleMessage::name() const {
  // @@protoc_insertion_point(field_get:SimpleMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleMessage::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SimpleMessage.name)
}
inline void SimpleMessage::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimpleMessage.name)
}
inline void SimpleMessage::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimpleMessage.name)
}
inline ::std::string* SimpleMessage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SimpleMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleMessage::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SimpleMessage.name)
}

// repeated string phone_number = 3;
inline int SimpleMessage::phone_number_size() const {
  return phone_number_.size();
}
inline void SimpleMessage::clear_phone_number() {
  phone_number_.Clear();
}
inline const ::std::string& SimpleMessage::phone_number(int index) const {
  // @@protoc_insertion_point(field_get:SimpleMessage.phone_number)
  return phone_number_.Get(index);
}
inline ::std::string* SimpleMessage::mutable_phone_number(int index) {
  // @@protoc_insertion_point(field_mutable:SimpleMessage.phone_number)
  return phone_number_.Mutable(index);
}
inline void SimpleMessage::set_phone_number(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SimpleMessage.phone_number)
  phone_number_.Mutable(index)->assign(value);
}
inline void SimpleMessage::set_phone_number(int index, const char* value) {
  phone_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SimpleMessage.phone_number)
}
inline void SimpleMessage::set_phone_number(int index, const char* value, size_t size) {
  phone_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SimpleMessage.phone_number)
}
inline ::std::string* SimpleMessage::add_phone_number() {
  return phone_number_.Add();
}
inline void SimpleMessage::add_phone_number(const ::std::string& value) {
  phone_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SimpleMessage.phone_number)
}
inline void SimpleMessage::add_phone_number(const char* value) {
  phone_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SimpleMessage.phone_number)
}
inline void SimpleMessage::add_phone_number(const char* value, size_t size) {
  phone_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SimpleMessage.phone_number)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SimpleMessage::phone_number() const {
  // @@protoc_insertion_point(field_list:SimpleMessage.phone_number)
  return phone_number_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SimpleMessage::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable_list:SimpleMessage.phone_number)
  return &phone_number_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_simple_5fmessage_2eproto__INCLUDED
